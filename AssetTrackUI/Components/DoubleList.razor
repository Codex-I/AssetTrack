<div class="row">
    <div class="col-5">
        <h6>@LeftTitle</h6>
        <select multiple class="form-select" size="@Rows" @bind="leftSelection">
            @foreach ((string Key, string Value) item in leftOptions)
            {
                <option value="@item.Key">@item.Value</option>
            }
        </select>
    </div>

    <div class="col-2 d-grid gap-2 align-content-center">
        <div class="btn-group-vertical">
            <button type="button" class="btn btn-outline-primary" @onclick=AddItems>Add ></button>
            <button type="button" class="btn btn-outline-primary" @onclick=AddAllItems>Add All >></button>
        </div>
        <div class="btn-group-vertical">
            <button type="button" class="btn btn-outline-secondary" @onclick=RemoveItems>Remove</button>
            <button type="button" class="btn btn-outline-secondary" @onclick=RemoveAllItems>Remove All</button>
        </div>
    </div>

    <div class="col-5">
        <h6>@RightTitle</h6>
        <select multiple class="form-select" size="@Rows" @bind="rightSelection">
            @foreach ((string Key, string Value) item in rightOptions)
            {
                <option value="@item.Key">@item.Value</option>
            }
        </select>
    </div>
</div>

@code {
    [Parameter] public string? LeftTitle  { get; set; }
    [Parameter] public string? RightTitle { get; set; }
    [Parameter] public int? Rows { get; set; } = 10;

    [Parameter] public IEnumerable<string>? SelectedIDs { get; set; }  
    [Parameter] public EventCallback<string[]> SelectedIDsChanged { get; set; }
    [Parameter] public IEnumerable<(string Key, string Value)>? AllOptions { get; set; }

    private List<(string Key, string Value)> leftOptions  = [];
    private List<(string Key, string Value)> rightOptions = [];

    private string[] leftSelection  = [];
    private string[] rightSelection = [];

    protected override void OnParametersSet()
    {
        if (SelectedIDs is null)
            SelectedIDs = [];

        if (AllOptions != null)
        {
            var selectedIDs = SelectedIDs.ToList();
            rightOptions = AllOptions.Where(x => selectedIDs.Contains(x.Key)).ToList();
            leftOptions = AllOptions.ExceptBy(SelectedIDs, e => e.Key).ToList();
        }

        base.OnParametersSet();
    }

    private void AddItems()
    {
        foreach (var key in leftSelection)
        {
            var item = leftOptions.First(x => x.Key == key);
            leftOptions.Remove(item);
            rightOptions.Add(item);
        }
        rightSelection = leftSelection;
        leftSelection = [];
        RaiseEvent();
    }

    private void AddAllItems()
    {
        leftOptions = [];
        rightOptions = AllOptions == null ? [] : AllOptions.ToList();
        //also clear the selection
        leftSelection = [];
        RaiseEvent();
    }

    private void RemoveItems()
    {
        foreach (var key in rightSelection)
        {
            var item = rightOptions.First(x => x.Key == key);
            rightOptions.Remove(item);
            leftOptions.Add(item);
        }
        leftSelection = rightSelection;
        rightSelection = [];
        RaiseEvent();
    }

    private void RemoveAllItems()
    {
        leftOptions = AllOptions == null ? [] : AllOptions.ToList();
        rightOptions = [];
        //also clear the selection
        rightSelection = [];
        RaiseEvent();
    }

    private void RaiseEvent()
    {
        SelectedIDsChanged.InvokeAsync(rightOptions.Select(x => x.Key).ToArray());
    }
}
